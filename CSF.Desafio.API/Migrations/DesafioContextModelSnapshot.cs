// <auto-generated />
using System;
using CSF.Desafio.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSF.Desafio.API.Migrations
{
    [DbContext(typeof(DesafioContext))]
    partial class DesafioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSF.Desafio.API.Entities.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("ESTADO")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOME")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TB_CIDADE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "RS",
                            Nome = "Santa Cruz do Sul"
                        },
                        new
                        {
                            Id = 2,
                            Estado = "RS",
                            Nome = "Vera Cruz"
                        });
                });

            modelBuilder.Entity("CSF.Desafio.API.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodEmpresa")
                        .HasColumnName("COD_EMPRESA")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("CPF")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DATA_NASCIMENTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOME")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("RG")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnName("TELEFONE")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TB_CLIENTE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodEmpresa = 1,
                            Cpf = "01552764095",
                            DataNascimento = new DateTime(1650, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rafaelv_s@hotmail.com",
                            Nome = "Rafael Vieira Suarez",
                            Rg = "6096800117",
                            Telefone = "51999708050"
                        },
                        new
                        {
                            Id = 2,
                            CodEmpresa = 1,
                            Cpf = "00460801040",
                            DataNascimento = new DateTime(1987, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "caroline_splett@gmail.com",
                            Nome = "Caroline Seer Splett",
                            Rg = "6096800618",
                            Telefone = "51996013891"
                        });
                });

            modelBuilder.Entity("CSF.Desafio.API.Entities.ClienteEndereco", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnName("TB_CLIENTE_ID")
                        .HasColumnType("int");

                    b.Property<int>("EnderecoId")
                        .HasColumnName("TB_ENDERECO_ID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.HasKey("ClienteId", "EnderecoId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("TB_CLIENTE_ENDERECO");

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            EnderecoId = 1,
                            Id = 1
                        },
                        new
                        {
                            ClienteId = 2,
                            EnderecoId = 2,
                            Id = 2
                        });
                });

            modelBuilder.Entity("CSF.Desafio.API.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("BAIRRO")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("CEP")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CidadeId")
                        .HasColumnName("TB_CIDADE_ID")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnName("COMPLEMENTO")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnName("NUMERO")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnName("RUA")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TipoEndereco")
                        .HasColumnName("TIPO_ENDERECO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("TB_ENDERECO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Ana Nery",
                            Cep = "96835422",
                            CidadeId = 1,
                            Complemento = "150 m",
                            Numero = "3322",
                            Rua = "Euclides Kliemann",
                            TipoEndereco = 1
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "Centro",
                            Cep = "96835344",
                            CidadeId = 2,
                            Complemento = "456 A",
                            Numero = "3322",
                            Rua = "Euclides Kliemann",
                            TipoEndereco = 2
                        });
                });

            modelBuilder.Entity("CSF.Desafio.API.Entities.ClienteEndereco", b =>
                {
                    b.HasOne("CSF.Desafio.API.Entities.Cliente", "Cliente")
                        .WithMany("ClienteEnderecos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSF.Desafio.API.Entities.Endereco", "Endereco")
                        .WithMany("ClienteEnderecos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSF.Desafio.API.Entities.Endereco", b =>
                {
                    b.HasOne("CSF.Desafio.API.Entities.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
